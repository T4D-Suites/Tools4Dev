_t4dSrcGitUtilsLoadCompletion(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _t4dSrcGitUtilsLoadCompletion
#   - Name:
#       _t4dSrcGitUtilsLoadCompletion
###
#   - Synopsis:
#       load custom git completions file
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=Unknown
    source $T4D_SOURCE_PATH/Git/git-completions.env

###############################
}

_t4dSrcGitUtilsFileAction(){
###### _t4dSrcGitUtilsFileAction
#   This is used to simply add a file to be commited after a status directly from WS_ROOT
###### DOCUMENTATION BLOC #####
    local _OLDPWD=$PWD
    local CHPWD=1
    cd $WS_ROOT/$(dirname $1)
    git $(echo ${@:2}) $(basename $1)
    cd $_OLDPWD
}

_t4dSrcGitUtilsExportCommits(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dSrcGitUtilsExportCommits
#   - Name:
#       _t4dSrcGitUtilsExportCommits
###
#   - Synopsis:
#       Cherry pick between branch's origin and branch's HEAD
###
#   - Usage:
#       _t4dSrcGitUtilsExportCommits <Base> <ListOfCommits>
###
#   - Example:
#       _t4dSrcGitUtilsExportCommits feature/toto
###
###### DOCUMENTATION BLOC #####

    local _Base="$1"
    local _ListOfCommits="${@:2}"
    # local _DiffCommits="$()"
#     
    git checkout $_Base
# git checkout result
    git cherry-pick --strategy=recursive -X theirs $(echo $_ListOfCommits)


###############################  
}

_t4dSrcGitUtilsStartBranch(){
###### _t4dSrcGitUtilsStartBranch
#   This function is here to help user to create his working branch using default good behavior
#   Usage  : _t4dSrcGitUtilsStartBranch -f toto
#   Usage  : _t4dSrcGitUtilsStartBranch -f 'ticket 321'
#   Usage  : _t4dSrcGitUtilsStartBranch -f ticket-321
#   Result : feature/ticket-321
#
#   Others :
#       Feature :
#           Usage  : _t4dSrcGitUtilsStartBranch -f epg-for-tvOS
#       Bugfixes
#           Usage  : _t4dSrcGitUtilsStartBranch -b epg-for-tvOS
#       Mutiple PR merge (for QA)
#           Usage  : _t4dSrcGitUtilsStartBranch -s pr1-pr2-pr3
#       Release
#           Usage  : _t4dSrcGitUtilsStartBranch -r 2.17.02
#       HotFix
#           Usage  : _t4dSrcGitUtilsStartBranch -h 2.17.02-crashiOS
###### DOCUMENTATION BLOC #####
    local _BranchType=""
    local _BranchName=""
    local _force=""
    while [[ "$@" != "" ]]; do
    case "$(echo $1)" in
            -force)
                _force="true"
            ;;
            -f*)
                _BranchType="feature/"
                shift
            ;;
            -b*)
                _BranchType="bugfix/"
                shift
            ;;
            -s*)
                _BranchType="staging/"
                shift
            ;;
            -r*)
                _BranchType="release/"
                shift
            ;;
            -h*)
                _BranchType="hotfix/"
                shift
            ;;
            *)
                if [[ "${_BranchName}" != "" ]]; then
                    alias t4dHelp='wksHelp _t4dSrcGitUtilsStartBranch'
                    (>&2 echo "${plyellow}WARNING :${pstd} Branch Name already set, ${plcyan}T4DHelp${pstd} for more info")
                fi
                _BranchName="$(echo $1 | sed 's| |-|g')"
                shift
            ;;
        esac
    done
    
    if [[ "${_BranchType}" == "" ]]; then
        alias t4dHelp='wksHelp _t4dSrcGitUtilsStartBranch'
        (>&2 echo "${plyellow}WARNING :${pstd} Branch Type is empty, ${plcyan}T4DHelp${pstd} for more info")
    fi
    
    _t4dPromptSquare "Creating Branch ${_BranchType}${_BranchName}" 
    [[ "$_force" != 'true' ]] && ( echo "Press enter to proceed, Ctrl+C to abort"; read -n )
    _t4dSrcGitUtilsSwitchOrCreateBranch "$(echo ${_BranchType}${_BranchName} | tr '[:upper:]' '[:lower:]')"
}

_t4dSrcGitUtilsDiff(){
    local _branchName="$(_t4dSrcGitInfoBranch)"
    local _sha7="$(_t4dSrcGitInfoSha7)"
    local _diff=''
    if [[ "$1" == "--prefix" ]]; then
        local _prefix="$2/"
        local _folderName="$2"
        shift
        shift
    else
        local _folderName="$(_t4dSrcGitInfoRootPath)"
    fi
    if [[ "$1" == '--name-only' ]]; then
        _diff="$(git diff --name-only ${@:2} | sed "s|^|    - ${_prefix}|g")"
    else
        _diff="$(git diff --no-color ${@} | grep -v '^index' | grep -v '^@@ '  | grep -v '^+++' | grep -v '^---' | sed "s|^diff|\\${plcyan} |g" | sed "s|^+|\\${pgreen}+|g" | sed "s|^-|\\${pred}-|g" | sed "s|^ |\\${pstd} |g")"
    fi
    _t4dSrcGitStatusBranchOLD "$_folderName" "${_branchName}" "${_sha7}"
    if [[ "$_diff" != "" ]]; then
        echo "$_diff"
    fi
}

_t4dSrcGitUtilsFindPullRequestFromCommit(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dSrcGitUtilsFindPullRequestFromCommit
#   - Name:
#       _t4dSrcGitUtilsFindPullRequestFromCommit
###
#   - Synopsis:
#       Searching for PullRequest Merged in log history
###
#   - Usage:
#       _t4dSrcGitUtilsFindPullRequestFromCommit <Commit>
###
###### DOCUMENTATION BLOC #####

    local BranchName="$(git log -1000 | grep "$1" | cut -d '(' -f2 | cut -d ')' -f1)"
    git log -1000 | grep "into $BranchName"

###############################
}

_t4dSrcGitUtilsSwitchOrCreateBranch(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
_t4dDebugInfoStart "_t4dSrcGitUtilsSwitchOrCreateBranch" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dSrcGitUtilsSwitchOrCreateBranch
#   - Name:
#       _t4dSrcGitUtilsSwitchOrCreateBranch
###
#   - Synopsis:
#       Try to create a local branch, if Already exists switch to it
###
#   - Definition:
#       Will try to create a new local branch, if it already exist, 
#           it will simply try to switch into it
#       On branch creation, will optionally checks if the branch as a correct prefix
#       Set the variable WS_GIT_VALID_PREFIX in your _t4d_/_variable_.env to "<prefix1> <prefix2> ..." setup prefix check
#
###
#   - Usage:
#       _t4dSrcGitUtilsSwitchOrCreateBranch <BranchName>
###
#   - Note:
#       We can't use git checkout -B option as it will also reset branch states
###
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########

    local _BranchExist="$(git rev-parse --verify refs/heads/$1 2> /dev/null)"
    if [[ "$_BranchExist" != "" ]]; then
        git checkout "$1" 
    else
        local _Prefix="$(echo $1 | cut -d '/' -f1)"
        if [[ "$WS_GIT_VALID_PREFIX" != "" ]] && [[ "$(echo $WS_GIT_VALID_PREFIX | grep -Eo "$_Prefix")" == "" ]]; then
            _t4dPromptAskForChar "Are you sure you want to create a branch that does not start with >${plpurple}${WS_GIT_VALID_PREFIX}${pstd}< ? Ctrl+C to abort"
        fi
        git checkout -b "$1" 2> /dev/null
    fi

###############################
_t4dDebugInfoEnd "_t4dFunctionName" "$@"
}

_t4dSrcGitUtilsPush(){
###### _t4dSrcGitUtilsPush
#
#   Definition:
#       This is used to push your work only if needed
#
#   Usage :
#       _t4dSrcGitUtilsPush <name> <state>
###### DOCUMENTATION BLOC #####
    local _folder="$1"
    local _status="$2"
    if [[ $_status == 'ahead' ]]; then
        echo "${plblue}$_folder :${pstd}"
        git push
    elif [[ $_status == 'diverged' ]]; then
        echo "${plblue}$_folder :${plyellow} ⚠️  Diverged from origin ⚠️${pstd}"
    elif [[ $_status == 'up-to-date' ]]; then
        echo "${plblue}$_folder :${plgrey} Skipped"
    elif [[ $_status == 'behind' ]]; then
         echo "${plblue}$_folder :${plyellow} ⚠️  behind from origin ⚠️${pstd}"
    elif [[ $_status == 'local' ]]; then
        echo "${plblue}$_folder :${pstd}"
        git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)
    fi
}

_t4dSrcGitDeleteBranch(){
###### _t4dSrcGitDeleteBranch
#
#   Definition:
#       This is used to delete a branch remotely TO BE USED CAREFULLY
#
#   Usage :
#       _t4dSrcGitDeleteBranch <branchName> origin <ForceDeletion>
###### DOCUMENTATION BLOC #####
    if [[ "$(_t4dSrcGitIsMyBranchProtected $1)" == "" ]] && [[ "$3" == "true" ]]; then
        git push $2 --delete $1 && echo "     Branch ${plgreen} $1 ${pstd} deleted"
    elif [[ "$(_t4dSrcGitIsMyBranchProtected $1)" != "" ]] && [[ "$3" == "true" ]]; then
        echo "     Branch ${plyellow} $1 ${pstd} Not deleted -> Protected branch"
    else
        _t4dPromptAskForChar "Press enter to delete $(_t4dSrcGitIsMyBranchProtected $1) ${plyellow} $1 ${pstd} from ${2}, any key to skip Branch Deletion, Ctrl+C to abort" && git push $2 --delete $1
    fi
}

_t4dSrcGitUtilsPull(){
###### _t4dSrcGitUtilsPull
#
#   Definition:
#       This is used to push your work only if needed
#
#   Usage :
#       _t4dSrcGitUtilsPush <name> <state>
###### DOCUMENTATION BLOC #####
    if [[ $3 == "-f" ]]; then
        echo "${plblue}$1 :${pstd}"
        git pull
    else
        if [[ $2 == 'ahead' ]]; then
            echo "${plblue}$1 :${plgrey} Skipped${pstd}"
        elif [[ $2 == 'diverged' ]]; then
            echo "${plblue}$1 :${plyellow} ⚠️  Diverged from origin ⚠️${pstd}"
        elif [[ $2 == 'up-to-date' ]]; then
            echo "${plblue}$1 :${plgrey} Skipped${pstd}"
        elif [[ $2 == 'behind' ]]; then
            echo "${plblue}$1 :${pstd}"
            git pull
        elif [[ $2 == 'local' ]]; then
            echo "${plblue}$1 :${plgreen} Local Branch${pstd}"
        fi
    fi
}