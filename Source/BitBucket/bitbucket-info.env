_t4dBitBucketPRInfoGetAllReviewers(){
###### _t4dBitBucketPRInfoGetAllReviewers
#   Write Pull Request Info to json file
#   Usage : _t4dBitBucketPRInfoGetAllReviewers <InputJsonFile>
##### DOCUMENTATION BLOC #####
    local __REVIEWERS="$(_t4dGetJsonData ${1} '.reviewers' | grep 'displayName' | cut -d ':' -f2 | sed 's|,||g' | sed 's|"||g' | wc -l | sed 's| ||g')"
    for i in $(seq 0 $(expr $__REVIEWERS - 1)); do
        local __NAME="$(_t4dGetJsonData ${1} ".reviewers[$i].user.displayName")"
        local __STATUS="$(_t4dGetJsonData ${1} ".reviewers[$i].status")"
        [[ "$__STATUS" == "APPROVED"   ]] && echo "${plgreen}${__STATUS}  ${pstd} $__NAME"
        [[ "$__STATUS" == "UNAPPROVED" ]] && echo "${plyellow}${__STATUS}${pstd} $__NAME"
        [[ "$__STATUS" == "NEEDS_WORK" ]] && echo "${plred}${__STATUS}${pstd} $__NAME"
    done
}

_t4dBitBucketPRInfoGetReviewersName(){
###### _t4dBitBucketPRInfoGetReviewersName
#   Write Pull Request Info to json file
#   Will not contain reviewer status
#   Usage : _t4dBitBucketPRInfoGetReviewersName <InputJsonFile>
##### DOCUMENTATION BLOC #####
    local __REVIEWERS="$(_t4dGetJsonData ${1} '.reviewers' | grep 'displayName' | cut -d ':' -f2 | sed 's|,||g' | sed 's|"||g' | wc -l | sed 's| ||g')"
    if [[ "$__REVIEWERS" != "0" ]]; then
        for i in $(seq 0 $(expr $__REVIEWERS - 1)); do
            local __NAME="$(_t4dGetJsonData ${1} ".reviewers[$i].user.displayName")"
            echo "$__NAME"
        done
    fi
}

_t4dBitBucketPRInfoGetDescription(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dBitBucketPRInfoGetDescription
#   - Name:
#       _t4dBitBucketPRInfoGetDescription
###
#   - Synopsis:
#       Return PullRequest Description from jsonFile
###
#   - Example:
#       _t4dBitBucketPRInfoGetDescription ${_DefaultOuputjsonFile}
###
###### DOCUMENTATION BLOC #####
    local _JsonFile="$1"

    _t4dGetJsonData $_JsonFile ".description" | sed 's|$|\\n|g' | sed 's|"|\\"|g' | tr -d '\n'

###############################
}

_t4dBitBucketGetRelatedPullRequests(){
###### _t4dBitBucketGetRelatedPullRequests
#   Get all related pull request listed in a global PR
#   Usage : _t4dBitBucketGetRelatedPullRequests <InputJsonFile>
##### DOCUMENTATION BLOC #####  
    echo "$(_t4dGetJsonData ${1} ".description" | grep -A100 'Related Pull Requests' | grep '^http')"

}

_t4dBitBucketParseBuildStatus(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.4.1
_t4dDebugInfoStart "_t4dBitBucketParseBuildStatus" "$#" "$@"
###### _t4dBitBucketParseBuildStatus
#   - Name:
#       _t4dBitBucketParseBuildStatus
###
#   - Synopsis:
#       Parse Json Output to generate Build Status Info
###
#   - Example:
#       _t4dBitBucketParseBuildStatus test.json
###
###### DOCUMENTATION BLOC #####
    if [[ "$1" == "-prompt" ]]; then
        shift
        local _yellow="$lyellow"
        local _green="$lgreen"
        local _red="$lred"
        local _std="$std"
    else
        local _yellow="$plyellow"
        local _green="$plgreen"
        local _red="$plred"
        local _std="$pstd"
    fi
    local _Succeed="$(cat $1 | grep '"state": "SUCCESSFUL"' | wc -l | tr -d ' ')"
    local _Failed="$(cat $1 | grep '"state": "FAILED"' | wc -l | tr -d ' ')"
    local _Progress="$(cat $1 | grep '"state": "INPROGRESS"' | wc -l | tr -d ' ')"
    local _Res=""
    
    if [[ $_Progress  -gt 0 ]]; then
        _Res="${_Res} ${_yellow}${_Progress}?${_std}"
    fi
    if [[ $_Succeed -gt 0 ]]; then
        _Res="${_Res} ${_green}${_Succeed}✔${_std}"
    fi
    if [[ $_Failed -gt 0 ]]; then
        _Res="${_Res} ${_red}${_Failed}✖${_std}"
    fi
    echo "${_Res}"

###############################
_t4dDebugInfoEnd "_t4dBitBucketParseBuildStatus" "$@"
}

_t4dBitBucketGetRefBranchName(){
###### _t4dBitBucketGetRefBranchName
#   Get base branch name from a global PR
#   Usage : _t4dBitBucketGetRefBranchName <InputJsonFile>
##### DOCUMENTATION BLOC #####  
    echo "$(_t4dGetJsonData ${1} ".fromRef.displayId")"
}

_t4dBitBucketUtilsGetPullRequestUuid(){
###### _t4dBitBucketUtilsGetPullRequestUuid
#   Get important information in order to edit merge or get a PullRequest, return <KEY>|<REPO>|<ID>
#   Usage : _t4dBitBucketUtilsGetPullRequestUuid | cut -d '|' -f1
#           _t4dBitBucketUtilsGetPullRequestUuid | cut -d '|' -f2
#           _t4dBitBucketUtilsGetPullRequestUuid | cut -d '|' -f3
##### DOCUMENTATION BLOC #####
    if [[ "$(echo $1 | grep "$_t4dBitbucketURL" )" != "" ]]; then
        local _url=$(echo $1 | sed "s|//$_t4dBitbucketURL/projects/||g" | sed 's|https:||g')
        local _KEY="$(echo $_url | cut -d "/" -f1)"
        local _REPO="$(echo $_url | cut -d "/" -f3)"
        local _ID="$(echo $_url | cut -d "/" -f5)"
    elif [[ $# -eq 1 ]]; then
        local _url=$(echo $1 | sed "s|//$_t4dBitbucketURL/projects/||g" | sed 's|https:||g')
        local _KEY="$(echo $_url | cut -d "/" -f1)"
        local _REPO="$(echo $_url | cut -d "/" -f3)"
        local _ID="$(echo $_url | cut -d "/" -f5)"
    else
        local _ID="$1"
        local _KEY="$2"
        local _REPO="$3"
    fi

    if [[ "${_KEY}" == "" ]] || [[ "${_REPO}" == "${_ID}" ]]; then
        _KEY="$(_t4dSrcGitInfoProjectKEY)"
        _REPO="$(_t4dSrcGitInfoRepoName)"
    fi

    echo "$_KEY|$_REPO|$_ID"
}
