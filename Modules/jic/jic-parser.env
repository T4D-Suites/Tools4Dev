_t4dModJicParseAndDumpLoop(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dModJicParseAndDumpLoop
#   - Name:
#       _t4dModJicParseAndDumpLoop
###
#   - Synopsis:
#       Parse json file with Jira content and dump to std output
###
#   - Example:
#       _t4dModJicParseAndDumpLoop jsonFile.json
#       _t4dModJicParseAndDumpLoop jsonFile.json md
###
###### DOCUMENTATION BLOC #####

    local _JsonFile="$1"
    local _outputStyle

    case $2 in 
        md|markdown)    _outputStyle="md"  ;;
        *)              _outputStyle="sh"  ;;
    esac

    #amount of available tickets in
    local __TOTAL="$(_t4dGetJsonData ${_JsonFile} '.total')"
    local __CURRENT="$(_t4dGetJsonData ${_JsonFile} '.maxResults')"
    if [[ "${__TOTAL:-0}" == "null" ]]; then
        __TOTAL=0
    fi
    if (( ${__TOTAL:-0} < ${__CURRENT:-0} )); then
        __CURRENT=$__TOTAL
    fi

    _t4dDebugLog "$pinfo" "Tickets returned by API : '$__CURRENT'"

    #parse
    if [[ "$__CURRENT" != "0" ]]; then
        local _limit=$(expr $__CURRENT - 1)
        for i in $(seq 0 $_limit); do
            local __ID="$(_t4dGetJsonData ${_JsonFile} ".issues[$i].key")"
            local __TITLE="$(_t4dGetJsonData ${_JsonFile} ".issues[$i].fields.summary")"
            local __STATUS="$(_t4dGetJsonData ${_JsonFile} ".issues[$i].fields.status.name")"
            local __TYPE="$(_t4dGetJsonData ${_JsonFile} ".issues[$i].fields.issuetype.name")"
            _t4dModJicOutput -id $__ID -t $__TITLE -s $__STATUS -ext $__TYPE -o $_outputStyle
        done
    else
        _t4dDebugLog "$perror" "Request did not return any result"
        return 100
    fi

###############################
}

_t4dModJicParseAndDumpLoopExternal(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dModJicParseAndDumpLoopExternal
#   - Name:
#       _t4dModJicParseAndDumpLoopExternal
###
#   - Synopsis:
#       Parse json file with Jira content and dump to std output
###
#   - Example:
#       _t4dModJicParseAndDumpLoopExternal jsonFile.json
#       _t4dModJicParseAndDumpLoopExternal jsonFile.json md
###
###### DOCUMENTATION BLOC #####

    local _JsonFile="$1"
    local _outputStyle

    case $2 in
        md|markdown)    _outputStyle="md"  ;;
        data)           _outputStyle="data"  ;;
        *)              _outputStyle="sh"  ;;
    esac

    #amount of available tickets in
    local __TOTAL="$(_t4dGetJsonData ${_JsonFile} '.total')"
    local __CURRENT="$(_t4dGetJsonData ${_JsonFile} '.maxResults')"
    if [[ "${__TOTAL:-0}" == "null" ]]; then
        __TOTAL=0
    fi
    if (( ${__TOTAL:-0} < ${__CURRENT:-0} )); then
        __CURRENT=$__TOTAL
    fi

    # if [[ "$_outputStyle" == "sh" ]]; then
    #     _t4dPromptEndOfLine "Results : $__CURRENT"
    # #     _t4dDebugLog "$pinfo" "Tickets returned by API : '$__CURRENT'"
    # fi

    #parse
    if [[ "$__CURRENT" != "0" ]] && [[ "$__CURRENT" != "null" ]]; then
        local _limit=$(expr $__CURRENT - 1)
        for i in $(seq 0 $_limit); do
            local __ID="$(_t4dGetJsonData ${_JsonFile} ".issues[$i].key")"
            local __TITLE="$(_t4dGetJsonData ${_JsonFile} ".issues[$i].fields.summary")"
            local __STATUS="$(_t4dGetJsonData ${_JsonFile} ".issues[$i].fields.status.name")"
            local __EXTERNAL="$(_t4dGetJsonData ${_JsonFile} ".issues[$i].fields.customfield_10301")"
            local __TYPE="$(_t4dGetJsonData ${_JsonFile} ".issues[$i].fields.issuetype.name")"
            _t4dModJicOutput -id $__ID -t $__TITLE -s $__STATUS -eid $__EXTERNAL -ext $__TYPE -o $_outputStyle
        done
        if [[ "$_outputStyle" == "sh" ]]; then
            _t4dPromptEndOfLine "Total : $__CURRENT" $plblue
        fi
    else
        _t4dDebugLog "$perror" "Request did not return any result"
        return 100
    fi

###############################
}

_t4dModJicParseAndDumpSingleTicket(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dModJicParseAndDumpSingleTicket
#   - Name:
#       _t4dModJicParseAndDumpSingleTicket
###
#   - Synopsis:
#       Parse json file with single Jira ticket and dump to std output
###
#   - Example:
#       _t4dModJicParseAndDumpSingleTicket jsonFile.json
###
###### DOCUMENTATION BLOC #####

    local _JsonFile="$1"

    case $2 in
        md|markdown)    _outputStyle="md"  ;;
        *)              _outputStyle="sh"  ;;
    esac

    local __ID="$(_t4dGetJsonData ${_JsonFile} ".key")"
    local __TITLE="$(_t4dGetJsonData ${_JsonFile} ".fields.summary")"
    local __STATUS="$(_t4dGetJsonData ${_JsonFile} ".fields.status.name")"
    local __EXTERNAL="$(_t4dGetJsonData ${_JsonFile} ".fields.customfield_10301")"
    local __ASSIGNEE="$(_t4dGetJsonData ${_JsonFile} ".fields.assignee.displayName")"
    local __ASSIGNEE_SHORT="$(_t4dGetJsonData ${_JsonFile} ".fields.assignee.name")"
    local __REPORTER="$(_t4dGetJsonData ${_JsonFile} ".fields.reporter.displayName")"
    local __REPORTER_SHORT="$(_t4dGetJsonData ${_JsonFile} ".fields.reporter.name")"
    local __DESCR="$(_t4dGetJsonData ${_JsonFile} ".fields.description")"
    local __PRIORITY="$(_t4dGetJsonData ${_JsonFile} ".fields.priority.name")"
    local __CREATED="$(_t4dGetJsonData ${_JsonFile} ".fields.created")"
    local __UPDATED="$(_t4dGetJsonData ${_JsonFile} ".fields.updated")"
    local __TYPE="$(_t4dGetJsonData ${_JsonFile} ".fields.issuetype.name")"
    local __LABELS="$(_t4dGetJsonData ${_JsonFile} ".fields.labels")"
    local __EPIC="$(_t4dGetJsonData ${_JsonFile} ".fields.epic.name")"
    local __SPRINT="$(_t4dGetJsonData ${_JsonFile} ".fields.sprint.name")"

    if [[ "${__ID}" != "null" ]]; then
        _t4dModJicOutputExtended -id $__ID \
            -t $__TITLE \
            -s $__STATUS \
            -eid ${__EXTERNAL} \
            -o $_outputStyle \
            -assignee "${__ASSIGNEE}(${__ASSIGNEE_SHORT})" \
            -reporter "$__REPORTER($__REPORTER_SHORT)" \
            -descr "${__DESCR}" \
            -priority $__PRIORITY \
            -created $__CREATED \
            -updated $__UPDATED \
            -type ${__TYPE} \
            -labels "${__LABELS}" \
            -epic ${__EPIC} \
            -sprint "${__SPRINT}"
    else
        _t4dDebugLog "$perror" "Ticket not found"
    fi
###############################
}

_t4dModJicParseAndDumpComments(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.5.0
###### _t4dModJicParseAndDumpComments
#   - Name:
#       _t4dModJicParseAndDumpComments
###
#   - Synopsis:
#       Parse json file with single Jira ticket and dump comments only to std output
###
#   - Example:
#       _t4dModJicParseAndDumpComments jsonFile.json
###
###### DOCUMENTATION BLOC #####
    local _JsonFile="$1"

    #amount of available comments in
    local __TOTAL="$(_t4dGetJsonData ${_JsonFile} '.fields.comment.total')"
    local __CURRENT="$(_t4dGetJsonData ${_JsonFile} '.fields.comment.maxResults')"
    if [[ "${__TOTAL:-0}" == "null" ]]; then
        __TOTAL=0
    fi
    if (( ${__TOTAL:-0} < ${__CURRENT:-0} )); then
        __CURRENT=$__TOTAL
    fi

    _t4dDebugLog "$pinfo" "Comments returned by API for given ticket : '$__CURRENT'"

    if [[ "$__CURRENT" != "0" ]] && [[ "$__CURRENT" != "null" ]]; then
        local _limit=$(expr $__CURRENT - 1)
        echo ""
        for i in $(seq 0 $_limit); do
            local __AUTHOR="$(_t4dGetJsonData ${_JsonFile} ".fields.comment.comments[$i].author.displayName")"
            local __BODY="$(_t4dGetJsonData ${_JsonFile} ".fields.comment.comments[$i].body")"

            echo "${plwhite}Author : $__AUTHOR${pstd}"
            echo "$__BODY"
            echo "${plblue}---${pstd}"
        done
    else
        _t4dDebugLog "$perror" "Ticket does not have any comments"
        return 100
    fi

###############################
}