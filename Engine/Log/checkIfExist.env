#CODE ERROR : 200

_t4dCheckFile(){
    if [[ -e $1 ]]; then
        _t4dCheckSucceeded "File $1 found"
    else
        _t4dCheckFailed "File $1 not found"
        return 1
    fi
}

_t4dCheckFunction(){
    type $1 | grep -q 'shell function'
}

_t4dCheckFolder(){
    if [[ -d $1 ]]; then
        _t4dCheckSucceeded "Folder found $1"
    else
        _t4dCheckFailed "Folder $1 not found"
        return 1
    fi
}

_t4dCheckFolderIsNotEmpty(){
    if [[ -d $1 ]]; then
        if [[ "$(ls -A $1)" != "" ]]; then
            _t4dCheckSucceeded "Content found in $1"
        else
            _t4dCheckWarning "Folder exist but it's empty"
        fi
    else
        _t4dCheckFailed "Folder $1 not found"
        return 1
    fi

    
}

_t4dCheckSymLink(){
    _result="$(readlink $1)"
    if [[ -d $_result ]]; then
        _t4dCheckSucceeded "Symlink $1 is set : $_result "
    else
        _t4dCheckFailed "Symlink $1 is not set"
        return 1
    fi
}

_t4dCheckEnv(){
    if [[ "$(eval "echo \$$1")" == "$2" ]]; then
        _t4dCheckSucceeded "$1 is set : $pcyan$(eval "echo \$$1")$pstd "
    else
        if [[ "$2" == "" ]] && [[ "$(eval "echo \$$1")" != "" ]]; then
            _t4dCheckSucceeded "$1 is set : $pcyan$(eval "echo \$$1")$pstd "
        elif [[ "$1" != "" ]]; then
            _t4dCheckWarning "Env $1 is set but not using default value : $(eval "echo \$$1")"
        else
            _t4dCheckFailed "Env $1 is not set"
            return 1
        fi
    fi
}

_t4dCheckVersion(){
    _t4dCheckBinaryVersion "Tools4Dev" "$(t4dGetVersion)" $1

}

_t4dCheckPackage(){
    local _dnfList="$(dnf list installed | cut -d ' ' -f1 | sed 's|.i686||g' | sed 's|.x86_64||g' | sed 's|.noarch||g')"
    local _Package="$1"
    if [[ "$(echo $_dnfList | grep "${_Package}\$" )" != "" ]]; then
        _t4dCheckSucceeded "Package $1 is installed"
    else
        _t4dCheckFailed "Package $1 is not installed"
        return 1
    fi
}

_t4dCheckBinary(){
    if [[ -e "$(which $1 2>& /dev/null)" ]]; then
        _t4dCheckSucceeded "Command $1 found in $pyellow$(which $1)$pstd"
    else
        _t4dCheckFailed "Command $1 not found"
        return 1
    fi
}

_t4dCheckCommand(){
    if [[ "$(command -v $1 2>& /dev/null)" != "" ]]; then
        _t4dCheckSucceeded "Command $1 found : $pyellow$(command -v $1)$pstd"
    else
        _t4dCheckFailed "Command $1 not found"
        return 1
    fi
}


_t4dCheckBinaryVersion(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.0
_t4dDebugInfoStart "_t4dCheckBinaryVersion" "$#" "$@"
#cat &>/dev/null << EOF
###### _t4dCheckBinaryVersion
#
#   Definition:
#       Test Binary Version
#
#   Usage :
#       _t4dCheckBinaryVersion <Name> <BinaryVersion> <Version>
#
#   Options :
#
#   Example :
#       On OSX : _t4dCheckBinaryVersion gcc "$(gcc -v 2>&1 | grep 'LLVM' | cut -d ' ' -f4)" "9.0.0"
#
#   Note :
#
#   - Keyword:
#       
#
###### DOCUMENTATION BLOC #####
#EOF
########## CODE BLOC ##########


    # if [[ "$2" == "$3" ]]; then
    #     _t4dCheckSucceeded "$1 available in version $plgreen $2 $pstd"
    # else
    #     _t4dCheckFailed "$1 available in version $2 but project has requiring $plred $3 $pstd"
    # if

    _name="$1"
    _version="$2"
    _deps="$3"
    if [[ ! -e "$(which $1 2>& /dev/null)" ]] && [[ "$1" != "Tools4Dev" ]]; then
        _t4dCheckFailed "Command $1 not found"
    else
        if [[ "$_version" == "$_deps" ]]; then
            _t4dCheckSucceeded "$_name is up-to-date : $_version"
        else
            _t4dmajor="$(echo $_version | cut -d '.' -f1)"
            _t4dminor="$(echo $_version | cut -d '.' -f2)"
            _t4dhotfix="$(echo $_version | cut -d '.' -f3)"
            _major="$(echo $_deps | cut -d '.' -f1)"
            _minor="$(echo $_deps | cut -d '.' -f2)"
            _hotfix="$(echo $_deps | cut -d '.' -f3)"
            _result="up-to-date"
            [[ $_t4dhotfix -gt $_hotfix ]] && _result="hotfixGt"
            [[ $_t4dhotfix -lt $_hotfix ]] && _result="hotfixLt"
            [[ $_t4dminor -gt $_minor ]] && _result="minorGt"
            [[ $_t4dminor -lt $_minor ]] && _result="minorLt"
            [[ $_t4dmajor -gt $_major ]] && _result="majorGt"
            [[ $_t4dmajor -lt $_major ]] && _result="majorLt"
            case $_result in
                majorLt)
                    _t4dCheckFailed "$_name is outdated : $_version (minimal $_deps)" 
                    return 1
                ;;
                majorGt)
                    _t4dCheckInfo "$_name is ahead : $_version (minimal $_deps)"
                ;;
                minorGt)
                    _t4dCheckSucceeded "$_name is ahead : $_version (minimal $_deps)"
                ;;
                minorLt)
                    _t4dCheckWarning "$_name is outdated : $_version (minimal $_deps)"
                    return 2
                ;;
                hotfixGt)
                    _t4dCheckSucceeded "$_name is ahead : $_version (minimal $_deps)"
                ;;
                hotfixLt)
                    _t4dCheckWarning "$_name is outdated : $_version (minimal $_deps)"
                    return 3
                ;;
                *)
                    echo "Can't get $1 Version"
                ;;
            esac
        fi
    fi

    

###############################
_t4dDebugInfoEnd "_t4dCheckBinaryVersion" "$@"

}

_t4dCheckOSXApp(){
    if [[ -e "${2:-/Applications}/$1.app" ]]; then
        _t4dCheckSucceeded "App $1 is already installed"
    else
        _t4dCheckFailed "Can't find $1.app in folder ${2:-'/Applications'}" && return 1
    fi
}

_t4dCheckFailed(){
##### _t4dCheckFailed
#
#       Definition :
#           Output prompt from colored check Failed
##### DOCUMENTATION BLOC #####
    _t4dDebugLog "   ${plred}✖${pstd}   -> " "$1"
}

_t4dCheckSucceeded(){
##### _t4dCheckSucceeded
#
#       Definition :
#           Output prompt from colored check Succeded
##### DOCUMENTATION BLOC #####
    _t4dDebugLog "   ${plgreen}✔${pstd}   -> " "$1"
}

_t4dCheckWarning(){
##### _t4dCheckWarning
#
#       Definition :
#           Output prompt from colored Warning
##### DOCUMENTATION BLOC #####
    _t4dDebugLog "   ${plyellow}✔ ?${pstd} -> " "$1"
}

_t4dCheckInfo(){
 ##### _t4dCheckInfo
#
#       Definition :
#           Output prompt from colored info
#
#       Usage :
#           _t4dCheckInfo <Info>
##### DOCUMENTATION BLOC #####  
    _t4dDebugLog "   ${plpurple}!! $1${pstd}"
}

